{"ast":null,"code":"var _jsxFileName = \"/Users/vivekrawat/Desktop/imageextractor/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Tesseract from \"tesseract.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageUploadComponent = () => {\n  _s();\n  const [imagePath, setImagePath] = useState(null);\n  const [extractedText, setExtractedText] = useState(null);\n  const handleImageUpload = event => {\n    const file = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        const uploadedImagePath = reader.result;\n        setImagePath(uploadedImagePath);\n\n        // Use Tesseract.js to extract text from the image\n        extractTextFromImage(uploadedImagePath);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n  const extractTextFromImage = imagePath => {\n    Tesseract.recognize(imagePath, \"eng\",\n    // Language: English\n    {\n      logger: info => console.log(info)\n    }).then(({\n      data: {\n        text\n      }\n    }) => {\n      setExtractedText(text);\n    }).catch(error => {\n      console.error(\"Error extracting text:\", error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: handleImageUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), imagePath && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Uploaded Image:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: imagePath,\n        alt: \"Uploaded\",\n        style: {\n          maxWidth: \"100%\",\n          maxHeight: \"600px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this), extractedText && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Extracted Text:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: extractedText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageUploadComponent, \"uMnnM0ldv4g+tYavSDrGJstRuAk=\");\n_c = ImageUploadComponent;\nexport default ImageUploadComponent;\nvar _c;\n$RefreshReg$(_c, \"ImageUploadComponent\");","map":{"version":3,"names":["React","useState","Tesseract","jsxDEV","_jsxDEV","ImageUploadComponent","_s","imagePath","setImagePath","extractedText","setExtractedText","handleImageUpload","event","file","target","files","reader","FileReader","onloadend","uploadedImagePath","result","extractTextFromImage","readAsDataURL","recognize","logger","info","console","log","then","data","text","catch","error","children","type","accept","onChange","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","style","maxWidth","maxHeight","_c","$RefreshReg$"],"sources":["/Users/vivekrawat/Desktop/imageextractor/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Tesseract from \"tesseract.js\";\n\nconst ImageUploadComponent = () => {\n  const [imagePath, setImagePath] = useState(null);\n  const [extractedText, setExtractedText] = useState(null);\n\n  const handleImageUpload = (event) => {\n    const file = event.target.files[0];\n\n    if (file) {\n      const reader = new FileReader();\n\n      reader.onloadend = () => {\n        const uploadedImagePath = reader.result;\n        setImagePath(uploadedImagePath);\n\n        // Use Tesseract.js to extract text from the image\n        extractTextFromImage(uploadedImagePath);\n      };\n\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const extractTextFromImage = (imagePath) => {\n    Tesseract.recognize(\n      imagePath,\n      \"eng\", // Language: English\n      {\n        logger: (info) => console.log(info),\n      }\n    )\n      .then(({ data: { text } }) => {\n        setExtractedText(text);\n      })\n      .catch((error) => {\n        console.error(\"Error extracting text:\", error);\n      });\n  };\n\n  return (\n    <div>\n      <input type=\"file\" accept=\"image/*\" onChange={handleImageUpload} />\n      {imagePath && (\n        <div>\n          <p>Uploaded Image:</p>\n          <img\n            src={imagePath}\n            alt=\"Uploaded\"\n            style={{ maxWidth: \"100%\", maxHeight: \"600px\" }}\n          />\n        </div>\n      )}\n      {extractedText && (\n        <div>\n          <p>Extracted Text:</p>\n          <pre>{extractedText}</pre>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ImageUploadComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}