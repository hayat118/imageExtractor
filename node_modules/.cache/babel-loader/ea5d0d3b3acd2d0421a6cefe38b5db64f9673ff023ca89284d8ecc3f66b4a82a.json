{"ast":null,"code":"const resolvePaths = require('./utils/resolvePaths');\nconst circularize = require('./utils/circularize');\nconst createJob = require('./createJob');\nconst {\n  log\n} = require('./utils/log');\nconst getId = require('./utils/getId');\nconst OEM = require('./constants/OEM');\nconst {\n  defaultOptions,\n  spawnWorker,\n  terminateWorker,\n  onMessage,\n  loadImage,\n  send\n} = require('./worker/node');\nlet workerCounter = 0;\nmodule.exports = async (langs = 'eng', oem = OEM.LSTM_ONLY, _options = {}, config = {}) => {\n  const id = getId('Worker', workerCounter);\n  const {\n    logger,\n    errorHandler,\n    ...options\n  } = resolvePaths({\n    ...defaultOptions,\n    ..._options\n  });\n  const resolves = {};\n  const rejects = {};\n\n  // Current langs, oem, and config file.\n  // Used if the user ever re-initializes the worker using `worker.reinitialize`.\n  const currentLangs = typeof langs === 'string' ? langs.split('+') : langs;\n  let currentOem = oem;\n  let currentConfig = config;\n  const lstmOnlyCore = [OEM.DEFAULT, OEM.LSTM_ONLY].includes(oem) && !options.legacyCore;\n  let workerResReject;\n  let workerResResolve;\n  const workerRes = new Promise((resolve, reject) => {\n    workerResResolve = resolve;\n    workerResReject = reject;\n  });\n  const workerError = event => {\n    workerResReject(event.message);\n  };\n  let worker = spawnWorker(options);\n  worker.onerror = workerError;\n  workerCounter += 1;\n  const setResolve = (action, res) => {\n    resolves[action] = res;\n  };\n  const setReject = (action, rej) => {\n    rejects[action] = rej;\n  };\n  const startJob = ({\n    id: jobId,\n    action,\n    payload\n  }) => new Promise((resolve, reject) => {\n    log(`[${id}]: Start ${jobId}, action=${action}`);\n    setResolve(action, resolve);\n    setReject(action, reject);\n    send(worker, {\n      workerId: id,\n      jobId,\n      action,\n      payload\n    });\n  });\n  const load = () => console.warn('`load` is depreciated and should be removed from code (workers now come pre-loaded)');\n  const loadInternal = jobId => startJob(createJob({\n    id: jobId,\n    action: 'load',\n    payload: {\n      options: {\n        lstmOnly: lstmOnlyCore,\n        corePath: options.corePath,\n        logging: options.logging\n      }\n    }\n  }));\n  const writeText = (path, text, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'FS',\n    payload: {\n      method: 'writeFile',\n      args: [path, text]\n    }\n  }));\n  const readText = (path, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'FS',\n    payload: {\n      method: 'readFile',\n      args: [path, {\n        encoding: 'utf8'\n      }]\n    }\n  }));\n  const removeFile = (path, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'FS',\n    payload: {\n      method: 'unlink',\n      args: [path]\n    }\n  }));\n  const FS = (method, args, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'FS',\n    payload: {\n      method,\n      args\n    }\n  }));\n  const loadLanguage = () => console.warn('`loadLanguage` is depreciated and should be removed from code (workers now come with language pre-loaded)');\n  const loadLanguageInternal = (_langs, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'loadLanguage',\n    payload: {\n      langs: _langs,\n      options: {\n        langPath: options.langPath,\n        dataPath: options.dataPath,\n        cachePath: options.cachePath,\n        cacheMethod: options.cacheMethod,\n        gzip: options.gzip,\n        lstmOnly: [OEM.LSTM_ONLY, OEM.TESSERACT_LSTM_COMBINED].includes(currentOem) && !options.legacyLang\n      }\n    }\n  }));\n  const initialize = () => console.warn('`initialize` is depreciated and should be removed from code (workers now come pre-initialized)');\n  const initializeInternal = (_langs, _oem, _config, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'initialize',\n    payload: {\n      langs: _langs,\n      oem: _oem,\n      config: _config\n    }\n  }));\n  const reinitialize = (langs = 'eng', oem, config, jobId) => {\n    // eslint-disable-line\n\n    if (lstmOnlyCore && [OEM.TESSERACT_ONLY, OEM.TESSERACT_LSTM_COMBINED].includes(oem)) throw Error('Legacy model requested but code missing.');\n    const _oem = oem || currentOem;\n    currentOem = _oem;\n    const _config = config || currentConfig;\n    currentConfig = _config;\n\n    // Only load langs that are not already loaded.\n    // This logic fails if the user downloaded the LSTM-only English data for a language\n    // and then uses `worker.reinitialize` to switch to the Legacy engine.\n    // However, the correct data will still be downloaded after initialization fails\n    // and this can be avoided entirely if the user loads the correct data ahead of time.\n    const langsArr = typeof langs === 'string' ? langs.split('+') : langs;\n    const _langs = langsArr.filter(x => !currentLangs.includes(x));\n    currentLangs.push(..._langs);\n    if (_langs.length > 0) {\n      return loadLanguageInternal(_langs, jobId).then(() => initializeInternal(langs, _oem, _config, jobId));\n    }\n    return initializeInternal(langs, _oem, _config, jobId);\n  };\n  const setParameters = (params = {}, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'setParameters',\n    payload: {\n      params\n    }\n  }));\n  const recognize = async (image, opts = {}, output = {\n    blocks: true,\n    text: true,\n    hocr: true,\n    tsv: true\n  }, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'recognize',\n    payload: {\n      image: await loadImage(image),\n      options: opts,\n      output\n    }\n  }));\n  const getPDF = (title = 'Tesseract OCR Result', textonly = false, jobId) => {\n    console.log('`getPDF` function is depreciated. `recognize` option `savePDF` should be used instead.');\n    return startJob(createJob({\n      id: jobId,\n      action: 'getPDF',\n      payload: {\n        title,\n        textonly\n      }\n    }));\n  };\n  const detect = async (image, jobId) => {\n    if (lstmOnlyCore) throw Error('`worker.detect` requires Legacy model, which was not loaded.');\n    return startJob(createJob({\n      id: jobId,\n      action: 'detect',\n      payload: {\n        image: await loadImage(image)\n      }\n    }));\n  };\n  const terminate = async () => {\n    if (worker !== null) {\n      /*\n      await startJob(createJob({\n        id: jobId,\n        action: 'terminate',\n      }));\n      */\n      terminateWorker(worker);\n      worker = null;\n    }\n    return Promise.resolve();\n  };\n  onMessage(worker, ({\n    workerId,\n    jobId,\n    status,\n    action,\n    data\n  }) => {\n    if (status === 'resolve') {\n      log(`[${workerId}]: Complete ${jobId}`);\n      let d = data;\n      if (action === 'recognize') {\n        d = circularize(data);\n      } else if (action === 'getPDF') {\n        d = Array.from({\n          ...data,\n          length: Object.keys(data).length\n        });\n      }\n      resolves[action]({\n        jobId,\n        data: d\n      });\n    } else if (status === 'reject') {\n      rejects[action](data);\n      if (action === 'load') workerResReject(data);\n      if (errorHandler) {\n        errorHandler(data);\n      } else {\n        throw Error(data);\n      }\n    } else if (status === 'progress') {\n      logger({\n        ...data,\n        userJobId: jobId\n      });\n    }\n  });\n  const resolveObj = {\n    id,\n    worker,\n    setResolve,\n    setReject,\n    load,\n    writeText,\n    readText,\n    removeFile,\n    FS,\n    loadLanguage,\n    initialize,\n    reinitialize,\n    setParameters,\n    recognize,\n    getPDF,\n    detect,\n    terminate\n  };\n  loadInternal().then(() => loadLanguageInternal(langs)).then(() => initializeInternal(langs, oem, config)).then(() => workerResResolve(resolveObj)).catch(() => {});\n  return workerRes;\n};","map":{"version":3,"names":["resolvePaths","require","circularize","createJob","log","getId","OEM","defaultOptions","spawnWorker","terminateWorker","onMessage","loadImage","send","workerCounter","module","exports","langs","oem","LSTM_ONLY","_options","config","id","logger","errorHandler","options","resolves","rejects","currentLangs","split","currentOem","currentConfig","lstmOnlyCore","DEFAULT","includes","legacyCore","workerResReject","workerResResolve","workerRes","Promise","resolve","reject","workerError","event","message","worker","onerror","setResolve","action","res","setReject","rej","startJob","jobId","payload","workerId","load","console","warn","loadInternal","lstmOnly","corePath","logging","writeText","path","text","method","args","readText","encoding","removeFile","FS","loadLanguage","loadLanguageInternal","_langs","langPath","dataPath","cachePath","cacheMethod","gzip","TESSERACT_LSTM_COMBINED","legacyLang","initialize","initializeInternal","_oem","_config","reinitialize","TESSERACT_ONLY","Error","langsArr","filter","x","push","length","then","setParameters","params","recognize","image","opts","output","blocks","hocr","tsv","getPDF","title","textonly","detect","terminate","status","data","d","Array","from","Object","keys","userJobId","resolveObj","catch"],"sources":["/Users/vivekrawat/Desktop/imageExtractor/node_modules/tesseract.js/src/createWorker.js"],"sourcesContent":["const resolvePaths = require('./utils/resolvePaths');\nconst circularize = require('./utils/circularize');\nconst createJob = require('./createJob');\nconst { log } = require('./utils/log');\nconst getId = require('./utils/getId');\nconst OEM = require('./constants/OEM');\nconst {\n  defaultOptions,\n  spawnWorker,\n  terminateWorker,\n  onMessage,\n  loadImage,\n  send,\n} = require('./worker/node');\n\nlet workerCounter = 0;\n\nmodule.exports = async (langs = 'eng', oem = OEM.LSTM_ONLY, _options = {}, config = {}) => {\n  const id = getId('Worker', workerCounter);\n  const {\n    logger,\n    errorHandler,\n    ...options\n  } = resolvePaths({\n    ...defaultOptions,\n    ..._options,\n  });\n  const resolves = {};\n  const rejects = {};\n\n  // Current langs, oem, and config file.\n  // Used if the user ever re-initializes the worker using `worker.reinitialize`.\n  const currentLangs = typeof langs === 'string' ? langs.split('+') : langs;\n  let currentOem = oem;\n  let currentConfig = config;\n  const lstmOnlyCore = [OEM.DEFAULT, OEM.LSTM_ONLY].includes(oem) && !options.legacyCore;\n\n  let workerResReject;\n  let workerResResolve;\n  const workerRes = new Promise((resolve, reject) => {\n    workerResResolve = resolve;\n    workerResReject = reject;\n  });\n  const workerError = (event) => { workerResReject(event.message); };\n\n  let worker = spawnWorker(options);\n  worker.onerror = workerError;\n\n  workerCounter += 1;\n\n  const setResolve = (action, res) => {\n    resolves[action] = res;\n  };\n\n  const setReject = (action, rej) => {\n    rejects[action] = rej;\n  };\n\n  const startJob = ({ id: jobId, action, payload }) => (\n    new Promise((resolve, reject) => {\n      log(`[${id}]: Start ${jobId}, action=${action}`);\n      setResolve(action, resolve);\n      setReject(action, reject);\n      send(worker, {\n        workerId: id,\n        jobId,\n        action,\n        payload,\n      });\n    })\n  );\n\n  const load = () => (\n    console.warn('`load` is depreciated and should be removed from code (workers now come pre-loaded)')\n  );\n\n  const loadInternal = (jobId) => (\n    startJob(createJob({\n      id: jobId, action: 'load', payload: { options: { lstmOnly: lstmOnlyCore, corePath: options.corePath, logging: options.logging } },\n    }))\n  );\n\n  const writeText = (path, text, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method: 'writeFile', args: [path, text] },\n    }))\n  );\n\n  const readText = (path, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method: 'readFile', args: [path, { encoding: 'utf8' }] },\n    }))\n  );\n\n  const removeFile = (path, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method: 'unlink', args: [path] },\n    }))\n  );\n\n  const FS = (method, args, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method, args },\n    }))\n  );\n\n  const loadLanguage = () => (\n    console.warn('`loadLanguage` is depreciated and should be removed from code (workers now come with language pre-loaded)')\n  );\n\n  const loadLanguageInternal = (_langs, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'loadLanguage',\n    payload: {\n      langs: _langs,\n      options: {\n        langPath: options.langPath,\n        dataPath: options.dataPath,\n        cachePath: options.cachePath,\n        cacheMethod: options.cacheMethod,\n        gzip: options.gzip,\n        lstmOnly: [OEM.LSTM_ONLY, OEM.TESSERACT_LSTM_COMBINED].includes(currentOem)\n          && !options.legacyLang,\n      },\n    },\n  }));\n\n  const initialize = () => (\n    console.warn('`initialize` is depreciated and should be removed from code (workers now come pre-initialized)')\n  );\n\n  const initializeInternal = (_langs, _oem, _config, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'initialize',\n      payload: { langs: _langs, oem: _oem, config: _config },\n    }))\n  );\n\n  const reinitialize = (langs = 'eng', oem, config, jobId) => { // eslint-disable-line\n\n    if (lstmOnlyCore && [OEM.TESSERACT_ONLY, OEM.TESSERACT_LSTM_COMBINED].includes(oem)) throw Error('Legacy model requested but code missing.');\n\n    const _oem = oem || currentOem;\n    currentOem = _oem;\n\n    const _config = config || currentConfig;\n    currentConfig = _config;\n\n    // Only load langs that are not already loaded.\n    // This logic fails if the user downloaded the LSTM-only English data for a language\n    // and then uses `worker.reinitialize` to switch to the Legacy engine.\n    // However, the correct data will still be downloaded after initialization fails\n    // and this can be avoided entirely if the user loads the correct data ahead of time.\n    const langsArr = typeof langs === 'string' ? langs.split('+') : langs;\n    const _langs = langsArr.filter((x) => !currentLangs.includes(x));\n    currentLangs.push(..._langs);\n\n    if (_langs.length > 0) {\n      return loadLanguageInternal(_langs, jobId)\n        .then(() => initializeInternal(langs, _oem, _config, jobId));\n    }\n\n    return initializeInternal(langs, _oem, _config, jobId);\n  };\n\n  const setParameters = (params = {}, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'setParameters',\n      payload: { params },\n    }))\n  );\n\n  const recognize = async (image, opts = {}, output = {\n    blocks: true, text: true, hocr: true, tsv: true,\n  }, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'recognize',\n      payload: { image: await loadImage(image), options: opts, output },\n    }))\n  );\n\n  const getPDF = (title = 'Tesseract OCR Result', textonly = false, jobId) => {\n    console.log('`getPDF` function is depreciated. `recognize` option `savePDF` should be used instead.');\n    return startJob(createJob({\n      id: jobId,\n      action: 'getPDF',\n      payload: { title, textonly },\n    }));\n  };\n\n  const detect = async (image, jobId) => {\n    if (lstmOnlyCore) throw Error('`worker.detect` requires Legacy model, which was not loaded.');\n\n    return startJob(createJob({\n      id: jobId,\n      action: 'detect',\n      payload: { image: await loadImage(image) },\n    }));\n  };\n\n  const terminate = async () => {\n    if (worker !== null) {\n      /*\n      await startJob(createJob({\n        id: jobId,\n        action: 'terminate',\n      }));\n      */\n      terminateWorker(worker);\n      worker = null;\n    }\n    return Promise.resolve();\n  };\n\n  onMessage(worker, ({\n    workerId, jobId, status, action, data,\n  }) => {\n    if (status === 'resolve') {\n      log(`[${workerId}]: Complete ${jobId}`);\n      let d = data;\n      if (action === 'recognize') {\n        d = circularize(data);\n      } else if (action === 'getPDF') {\n        d = Array.from({ ...data, length: Object.keys(data).length });\n      }\n      resolves[action]({ jobId, data: d });\n    } else if (status === 'reject') {\n      rejects[action](data);\n      if (action === 'load') workerResReject(data);\n      if (errorHandler) {\n        errorHandler(data);\n      } else {\n        throw Error(data);\n      }\n    } else if (status === 'progress') {\n      logger({ ...data, userJobId: jobId });\n    }\n  });\n\n  const resolveObj = {\n    id,\n    worker,\n    setResolve,\n    setReject,\n    load,\n    writeText,\n    readText,\n    removeFile,\n    FS,\n    loadLanguage,\n    initialize,\n    reinitialize,\n    setParameters,\n    recognize,\n    getPDF,\n    detect,\n    terminate,\n  };\n\n  loadInternal()\n    .then(() => loadLanguageInternal(langs))\n    .then(() => initializeInternal(langs, oem, config))\n    .then(() => workerResResolve(resolveObj))\n    .catch(() => {});\n\n  return workerRes;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}